type MatchState {
  id: ID!
  matchId: ID!
  players: AWSJSON!
  game: AWSJSON!
  move: AWSJSON!
  timestamp: AWSDateTime!
}

type Message @aws_cognito_user_pools @aws_iam {
  Id: ID! @aws_cognito_user_pools @aws_iam
  ConversationId: ID! @aws_cognito_user_pools @aws_iam
  SenderId: ID! @aws_cognito_user_pools @aws_iam
  Content: String! @aws_cognito_user_pools @aws_iam
  CreatedAt: AWSDateTime! @aws_cognito_user_pools @aws_iam
}

input UpdateMatchStateInput {
  id: ID!
  matchId: ID!
  playerStates: AWSJSON! # array of player states in JSON format
  gameState: AWSJSON! # any JSON-structured game state
  move: AWSJSON! # any JSON-structured move
  timestamp: AWSDateTime! # use AWSDateTime for ISO format strings
}

input SendMessageInput {
  id: ID!
  conversationId: ID!
  senderId: ID!
  content: String!
}

type Query {
  getMatchState(matchId: ID!): MatchState @aws_cognito_user_pools @aws_iam
}

type Mutation {
  updateMatchState(input: UpdateMatchStateInput!): MatchState
    @aws_cognito_user_pools
    @aws_iam

  sendMessage(input: SendMessageInput!): Message
    @aws_cognito_user_pools
    @aws_iam
}

type Subscription {
  onMatchStateUpdated(MatchId: ID!): MatchState
    @aws_subscribe(mutations: ["updateMatchState"])

  onMessageSent(ConversationId: ID!): Message
    @aws_subscribe(mutations: ["sendMessage"])
}
