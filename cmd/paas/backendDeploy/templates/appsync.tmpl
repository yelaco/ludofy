AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: AppSync Stack

Parameters:
  StackName:
    Type: String
  DeploymentStage:
    Type: String
    Default: dev

Resources:
  AppSyncApi:
    Type: AWS::Serverless::GraphQLApi
    Properties:
      Name: !Sub "${StackName}-${DeploymentStage}-api"
      SchemaUri: ../internal/aws/appsync/schema.graphql
      Auth:
        Type: AMAZON_COGNITO_USER_POOLS
        UserPool:
          AwsRegion: !Ref AWS::Region
          UserPoolId:
            Fn::ImportValue: !Sub "${StackName}-UserPoolId"
          DefaultAction: ALLOW
        Additional:
          - Type: AWS_IAM

  MatchStatesDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      Name: MatchStatesDataSource
      Type: AMAZON_DYNAMODB
      DynamoDBConfig:
        TableName:
          Fn::ImportValue: !Sub "${StackName}-MatchStatesTableName"
        AwsRegion: !Ref AWS::Region
      ServiceRoleArn: !GetAtt AppSyncRole.Arn

  GetMatchStateResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      TypeName: Query
      FieldName: getMatchState
      DataSourceName: !GetAtt MatchStatesDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "GetItem",
          "key": {
            "MatchId": { "S": "$context.arguments.matchId" }
          }
        }
      ResponseMappingTemplate: "$util.toJson($context.result)"

  UpdateMatchStateResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      TypeName: Mutation
      FieldName: updateMatchState
      DataSourceName: !GetAtt MatchStatesDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "PutItem",
          "key": {
            "Id": { "S": "$context.arguments.input.id" }
          },
          "attributeValues": {
            "MatchId": { "S": "$context.arguments.input.matchId" },
            "GameState": #if($ctx.args.input.gameState) $util.dynamodb.toDynamoDBJson($ctx.args.input.gameState) #else { "NULL": null } #end,
            "PlayerStates": $util.dynamodb.toDynamoDBJson($context.arguments.input.playerStates),
            "Move": $util.dynamodb.toDynamoDBJson($context.arguments.input.move),
            "Timestamp": { "S": "$context.arguments.input.timestamp" }
          }
        }
      ResponseMappingTemplate: "$util.toJson($context.result)"

{{- if .IncludeChatService }}
  MessagesDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      Name: MessagesDataSource
      Type: AMAZON_DYNAMODB
      DynamoDBConfig:
        TableName:
          Fn::ImportValue: !Sub "${StackName}-MessagesTableName"
        AwsRegion: !Ref AWS::Region
      ServiceRoleArn: !GetAtt AppSyncRole.Arn

  SendMessageResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      TypeName: Mutation
      FieldName: sendMessage
      DataSourceName: !GetAtt MessagesDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "PutItem",
          "key": {
            "Id": { "S": "$context.arguments.input.id" }
          },
          "attributeValues": {
            "ConversationId": { "S": "$context.arguments.input.conversationId" },
            "SenderId": { "S": "$context.arguments.input.senderId" },
            "Content": { "S": "$context.arguments.input.content" },
            "CreatedAt": { "S": "$util.time.nowISO8601()" }
          }
        }
      ResponseMappingTemplate: "$util.toJson($context.result)"
{{- end }}

  ### IAM Roles ###
  AppSyncRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${StackName}-AppSyncRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: appsync.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AppSyncDynamoDBAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:Scan
                Resource:
                  - Fn::ImportValue: !Sub "${StackName}-MatchStatesTableArn"
                  {{- if .IncludeChatService }}
                  - Fn::ImportValue: !Sub "${StackName}-MessagesTableArn"
  {{- end }}

  AppSyncAccessRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${StackName}-AppSyncAccessRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: "*"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: AppSyncGraphQLPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: appsync:GraphQL
                Resource: !Sub "${AppSyncApi.Arn}/*"

Outputs:
  AppSyncGraphQLApiUrl:
    Value: !GetAtt AppSyncApi.GraphQLUrl
    Export:
      Name: !Sub "${StackName}-AppSyncGraphQLApiUrl"

  AppSyncRealtimeApiUrl:
    Value: !GetAtt AppSyncApi.RealtimeUrl
    Export:
      Name: !Sub "${StackName}-AppSyncRealtimeApiUrl"

  AppSyncApiArn:
    Value: !Ref AppSyncApi
    Export:
      Name: !Sub "${StackName}-AppSyncApiArn"

  AppSyncAccessRoleArn:
    Value: !GetAtt AppSyncAccessRole.Arn
    Export:
      Name: !Sub "${StackName}-AppSyncAccessRoleArn"
