AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Storage Stack for Slchess

Globals:
  Function:
    Timeout: 5
    MemorySize: 128
    Architectures:
      - arm64

Parameters:
  StackName:
    Type: String
  ServerImageUri:
    Type: String
  DeploymentStage:
    Type: String

Resources:
  ServerCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "${StackName}-${DeploymentStage}-server-cluster"

  ServerDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub "${StackName}-${DeploymentStage}-server"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: "256"
      Memory: "512"
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt ServerRole.Arn
      ContainerDefinitions:
        - Image: !Ref ServerImageUri
          Name: !Sub "${StackName}-${DeploymentStage}-server"
          Essential: true
          PortMappings:
            - ContainerPort: 7202
              Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Sub "/${StackName}/${DeploymentStage}/ecs/server"
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          Environment:
            - Name: AWS_DEFAULT_REGION
              Value: !Ref AWS::Region
            - Name: ECS_ENABLE_CONTAINER_METADATA
              Value: "true"

  ServerService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ServerCluster
      ServiceName: !Sub "${StackName}-${DeploymentStage}-server-service"
      LaunchType: FARGATE
      DesiredCount: 0
      TaskDefinition: !Ref ServerDefinition
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - subnet-08afaaea0b1e4f825
            - subnet-0f7183aa53381f50c
            - subnet-0642049eeace8e1b3
          SecurityGroups:
            - sg-003fd8c2326289ec4
          AssignPublicIp: ENABLED

  ServerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ServerRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: "ecs-tasks.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: LambdaInvokePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource: "*"
        - PolicyName: AppSyncAccessPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: appsync:GraphQL
                Resource: !Sub
                  - "${ApiArn}/*"
                  - ApiArn: !ImportValue AppSyncApiArn
        - PolicyName: DynamoDBAccessPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:Query
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                Resource:
                  - !ImportValue UserMatchesTableArn
                  - !ImportValue ActiveMatchesTableArn
{{- if .IncludeChatService }}
                  - !ImportValue SpectatorConversationsTableArn
{{- end }}
                  - !ImportValue MatchStatesTableArn
                  - !Sub
                    - "${MatchStatesTableArn}/index/MatchIndex"
                    - MatchStatesTableArn: !ImportValue MatchStatesTableArn
        - PolicyName: ECSTaskProtectionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ecs:UpdateTaskProtection
                Resource:
                  - !Sub "arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:task/${ServerCluster}/*"

  ServerAutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 2
      MinCapacity: 0
      ResourceId: !Sub service/${ServerCluster}/${ServerService.Name}
      RoleARN: !Sub arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  ServerAutoScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: ServerAutoScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ServerAutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 70.0
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleInCooldown: 300
        ScaleOutCooldown: 60

{{- if .IncludeRankingService }}
  UserRatings:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${StackName}-${DeploymentStage}-UserRatings"
      AttributeDefinitions:
        - AttributeName: UserId
          AttributeType: S
        - AttributeName: Rating
          AttributeType: N
        - AttributeName: PartitionKey # Static partition key for GSI
          AttributeType: S
      KeySchema:
        - AttributeName: UserId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: RatingIndex
          KeySchema:
            - AttributeName: PartitionKey # Static key
              KeyType: HASH
            - AttributeName: Rating
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST
{{- end }}

  ServerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/${StackName}/${DeploymentStage}/ecs/server"
      RetentionInDays: 7
