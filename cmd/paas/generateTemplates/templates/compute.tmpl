AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Compute Stack for Backend

Globals:
  Function:
    Timeout: 5
    MemorySize: 128
    Architectures:
      - arm64

Parameters:
  StackName:
    Type: String
  ServerImageUri:
    Type: String
  DeploymentStage:
    Type: String

Resources:
  ### ECS Cluster ###
  ServerCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "${StackName}-${DeploymentStage}-server-cluster"

  ### IAM Roles ###
  ServerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ServerRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: "ecs-tasks.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: LambdaInvokePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource: "*"
        - PolicyName: AppSyncAccessPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: appsync:GraphQL
                Resource: !Sub
                  - "${ApiArn}/*"
                  - ApiArn: !ImportValue AppSyncApiArn
        - PolicyName: DynamoDBAccessPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:Query
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                Resource:
                  - !ImportValue UserMatchesTableArn
                  - !ImportValue ActiveMatchesTableArn
{{- if .IncludeChatService }}
                  - !ImportValue SpectatorConversationsTableArn
{{- end }}
                  - !ImportValue MatchStatesTableArn
                  - !Sub
                    - "${MatchStatesTableArn}/index/MatchIndex"
                    - MatchStatesTableArn: !ImportValue MatchStatesTableArn
        - PolicyName: ECSTaskProtectionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ecs:UpdateTaskProtection
                Resource:
                  - !Sub "arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:task/${ServerCluster}/*"

  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ECSTaskExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:GetAuthorizationToken
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  ### Lambda ###
  EndGameFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      FunctionName: !Sub "${StackName}-${DeploymentStage}-EndGame"
      CodeUri: ../cmd/lambda/endGame/
      Handler: bootstrap
      Runtime: provided.al2023
      Timeout: 10
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !ImportValue UserMatchesTableName
        - DynamoDBCrudPolicy:
            TableName: !ImportValue ActiveMatchesTableName
        - DynamoDBCrudPolicy:
            TableName: !ImportValue MatchRecordsTableName
{{- if .IncludeRankingService }}
        - DynamoDBCrudPolicy:
            TableName: !ImportValue MatchResultsTableName
        - DynamoDBCrudPolicy:
            TableName: !ImportValue UserRatingsTableName
{{- end }}
{{- if .IncludeChatService }}
        - DynamoDBCrudPolicy:
            TableName: !ImportValue SpectatorConversationsTableName
{{- end }}
      Environment:
        Variables:
          USER_MATCHES_TABLE_NAME: !ImportValue UserMatchesTableName
          ACTIVE_MATCHES_TABLE_NAME: !ImportValue ActiveMatchesTableName
          MATCH_STATES_TABLE_NAME: !ImportValue MatchStatesTableName
          MATCH_RECORDS_TABLE_NAME: !ImportValue MatchRecordsTableName
{{- if .IncludeRankingService }}
          MATCH_RESULTS_TABLE_NAME: !ImportValue MatchResultsTableName
          USER_RATINGS_TABLE_NAME: !ImportValue UserRatingsTableName
{{- end }}
{{- if .IncludeChatService }}
          SPECTATOR_CONVERSATIONS_TABLE_NAME: !ImportValue SpectatorConversationsTableName
{{- end }}

  AbortGameFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      FunctionName: !Sub "${StackName}-${DeploymentStage}-AbortGame"
      CodeUri: ../cmd/lambda/abortGame/
      Handler: bootstrap
      Runtime: provided.al2023
      Timeout: 10
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !ImportValue UserMatchesTableName
        - DynamoDBCrudPolicy:
            TableName: !ImportValue ActiveMatchesTableName
{{- if .IncludeChatService }}
        - DynamoDBCrudPolicy:
            TableName: !ImportValue SpectatorConversationsTableName
{{- end }}
      Environment:
        Variables:
          USER_MATCHES_TABLE_NAME: !ImportValue UserMatchesTableName
          ACTIVE_MATCHES_TABLE_NAME: !ImportValue ActiveMatchesTableName
{{- if .IncludeChatService }}
          SPECTATOR_CONVERSATIONS_TABLE_NAME: !ImportValue SpectatorConversationsTableName
{{- end }}

Outputs:
  ServerClusterName:
    Value: !Ref ServerCluster
    Export:
      Name: ServerClusterName
