AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: Root Stack for Slchess Backend

Parameters:
  StackName:
    Type: String
    Default: ludofy
  DeployJobImageUri:
    Type: String
  DeploymentStage:
    Type: String
    Default: dev

Resources:
  BatchServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: AWSBatchServiceRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: batch.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSBatchServiceRole

  ### Auth ###
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub "${StackName}-${DeploymentStage}-UserPool"
      AutoVerifiedAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
          RequireUppercase: true
      Schema:
        - Name: email
          AttributeDataType: String
          Required: true
          Mutable: true

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub "${StackName}-${DeploymentStage}-UserPoolClient"
      UserPoolId: !Ref UserPool
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_SRP_AUTH

  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Sub "${StackName}-${DeploymentStage}"
      UserPoolId: !Ref UserPool

  ### BATCH JOB ###
  BatchComputeEnvironment:
    Type: AWS::Batch::ComputeEnvironment
    Properties:
      ComputeEnvironmentName: !Sub "${StackName}-ComputeEnv"
      Type: MANAGED
      ComputeResources:
        Type: FARGATE
        MaxvCpus: 256
        Subnets:
          - subnet-08afaaea0b1e4f825
          - subnet-0f7183aa53381f50c
          - subnet-0642049eeace8e1b3
        SecurityGroupIds:
          - sg-003fd8c2326289ec4
      ServiceRole: BatchServiceRole

  BatchJobQueue:
    Type: AWS::Batch::JobQueue
    Properties:
      ComputeEnvironmentOrder:
        - Order: 1
          ComputeEnvironment: !Ref BatchComputeEnvironment
      Priority: 1

  BatchJobDefinition:
    Type: AWS::Batch::JobDefinition
    Properties:
      JobDefinitionName: !Sub "${StackName}-deploy-job-definition"
      Type: Container
      PlatformCapabilities:
        - FARGATE
      ContainerProperties:
        Image: !Ref DeployJobImageUri
        ResourceRequirements:
          - Type: VCPU
            Value: "1"
          - Type: MEMORY
            Value: "4096"
        ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
        JobRoleArn: !GetAtt DeployJobRole.Arn
        NetworkConfiguration:
          AssignPublicIp: ENABLED

  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ECSTaskExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:GetAuthorizationToken
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
        - PolicyName: SSMParameterAccessPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                  - ssm:GetParameters
                Resource:
                  - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${StackName}/*"

  DeployJobRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: DeployJobRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: DeployJobInlinePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              # CloudFormation permissions to manage stacks
              - Effect: Allow
                Action:
                  - cloudformation:CreateStack
                  - cloudformation:UpdateStack
                  - cloudformation:DeleteStack
                  - cloudformation:DescribeStacks
                  - cloudformation:CreateChangeSet
                  - cloudformation:ExecuteChangeSet
                  - cloudformation:DescribeChangeSet
                  - cloudformation:DescribeStackEvents
                  - cloudformation:GetTemplate
                Resource: "*"

              # S3 permissions to upload SAM artifacts (Lambda zips, etc.)
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:ListBucket
                  - s3:CreateBucket
                Resource: "*"

              # IAM permissions if your SAM template creates Lambda execution roles
              - Effect: Allow
                Action:
                  - iam:PassRole
                  - iam:CreateRole
                  - iam:AttachRolePolicy
                  - iam:PutRolePolicy
                  - iam:CreatePolicy
                Resource: "*"

              # Lambda permissions if you deploy serverless functions
              - Effect: Allow
                Action:
                  - lambda:CreateFunction
                  - lambda:UpdateFunctionCode
                  - lambda:UpdateFunctionConfiguration
                  - lambda:DeleteFunction
                  - lambda:GetFunction
                Resource: "*"

              # API Gateway permissions if you deploy APIs
              - Effect: Allow
                Action:
                  - apigateway:POST
                  - apigateway:PUT
                  - apigateway:PATCH
                  - apigateway:DELETE
                  - apigateway:GET
                Resource: "*"

              # DynamoDB permissions (keep your previous ones)
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                Resource: "*"

              # CloudWatch Logs permissions for function logs
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DeleteLogGroup
                  - logs:PutRetentionPolicy
                Resource: "*"

              # AWS Batch permissions (if needed for submitting batch jobs inside deployment flow)
              - Effect: Allow
                Action:
                  - batch:SubmitJob
                  - batch:DescribeJobs
                  - batch:TerminateJob
                Resource: "*"

  ### HTTP API Gateway ###
  HttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      Name: !Sub "${StackName}-http-api"
      StageName: !Ref DeploymentStage
      FailOnWarnings: true
      CorsConfiguration:
        AllowOrigins: ["*"]
        AllowHeaders:
          - Authorization
          - Stripe-Signature
        AllowMethods:
          - GET
          - POST
          - DELETE
      Auth:
        Authorizers:
          CognitoAuthorizer:
            JwtConfiguration:
              issuer: !Sub
                - "https://cognito-idp.${AWS::Region}.amazonaws.com/${UserPoolId}"
                - UserPoolId: !Ref UserPool
              audience:
                - !Ref UserPoolClient
            IdentitySource: "$request.header.Authorization"
        DefaultAuthorizer: CognitoAuthorizer

  DeployBackend:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      FunctionName: !Sub "${StackName}-${DeploymentStage}-DeployBackend"
      CodeUri: ./cmd/paas/deployBackend/
      Handler: bootstrap
      Runtime: provided.al2023
      Timeout: 10
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref StackName
        - Statement:
            - Effect: Allow
              Action:
                - batch:SubmitJob
              Resource: "*"
        - DynamoDBCrudPolicy:
            TableName: !Ref Deployments
      Environment:
        Variables:
          MAIN_BUCKET_NAME: !Ref StackName
          BATCH_JOB_NAME: "deploy-backend"
          BATCH_JOB_QUEUE: !Ref BatchJobQueue
          BATCH_JOB_DEFINITION: !Ref BatchJobDefinition
          DEPLOYMENTS_TABLE_NAME: !Ref Deployments
      Events:
        ApiEvent:
          Type: HttpApi
          Properties:
            Path: /deploy
            Method: POST
            ApiId: !Ref HttpApi

  BackendGetFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      FunctionName: !Sub "${StackName}-${DeploymentStage}-BackendGet"
      CodeUri: ./cmd/paas/backendGet/
      Handler: bootstrap
      Runtime: provided.al2023
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref Backends
      Environment:
        Variables:
          BACKENDS_TABLE_NAME: !Ref Backends
      Events:
        ApiEvent:
          Type: HttpApi
          Properties:
            Path: /backend/{id}
            Method: GET
            ApiId: !Ref HttpApi

  BackendListFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      FunctionName: !Sub "${StackName}-${DeploymentStage}-BackendList"
      CodeUri: ./cmd/paas/backendList/
      Handler: bootstrap
      Runtime: provided.al2023
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref Backends
      Environment:
        Variables:
          BACKENDS_TABLE_NAME: !Ref Backends
      Events:
        ApiEvent:
          Type: HttpApi
          Properties:
            Path: /backends
            Method: GET
            ApiId: !Ref HttpApi

  DeploymentGetFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      FunctionName: !Sub "${StackName}-${DeploymentStage}-DeploymentGet"
      CodeUri: ./cmd/paas/deploymentGet/
      Handler: bootstrap
      Runtime: provided.al2023
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref Deployments
      Environment:
        Variables:
          DEPLOYMENTS_TABLE_NAME: !Ref Deployments
      Events:
        ApiEvent:
          Type: HttpApi
          Properties:
            Path: /deployment/{id}
            Method: GET
            ApiId: !Ref HttpApi

  DeploymentListFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      FunctionName: !Sub "${StackName}-${DeploymentStage}-DeploymentList"
      CodeUri: ./cmd/paas/deploymentList/
      Handler: bootstrap
      Runtime: provided.al2023
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref Deployments
      Environment:
        Variables:
          DEPLOYMENTS_TABLE_NAME: !Ref Deployments
      Events:
        ApiEvent:
          Type: HttpApi
          Properties:
            Path: /deployments
            Method: GET
            ApiId: !Ref HttpApi

  ### Storage ###
  Backends:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${StackName}-${DeploymentStage}-Backends"
      AttributeDefinitions:
        - AttributeName: Id
          AttributeType: S
        - AttributeName: UserId
          AttributeType: S
      KeySchema:
        - AttributeName: Id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: UserIndex
          KeySchema:
            - AttributeName: UserId
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST

  Deployments:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${StackName}-${DeploymentStage}-Deployments"
      AttributeDefinitions:
        - AttributeName: Id
          AttributeType: S
        - AttributeName: UserId
          AttributeType: S
      KeySchema:
        - AttributeName: Id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: UserIndex
          KeySchema:
            - AttributeName: UserId
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST

Outputs:
  DeployBackendUrl:
    Description: "Endpoint URL for deploying backend"
    Value: !Sub "POST https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com/${DeploymentStage}/deploy"

  BackendGetUrl:
    Description: "Endpoint URL for getting backend information"
    Value: !Sub "GET https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com/${DeploymentStage}/backend/{id}"

  BackendListUrl:
    Description: "Endpoint URL for listing backends of a user"
    Value: !Sub "GET https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com/${DeploymentStage}/backends"

  DeploymentGetUrl:
    Description: "Endpoint URL for getting deployment information"
    Value: !Sub "GET https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com/${DeploymentStage}/deployment/{id}"

  DeploymentListUrl:
    Description: "Endpoint URL for listing deployments of a user"
    Value: !Sub "GET https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com/${DeploymentStage}/deployments"
